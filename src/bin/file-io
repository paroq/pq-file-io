#!/usr/bin/env bash

file_io_help ( )
{
	echo "file-io usage:"
		echo "  help                            This menu"
	echo "  disable <instance>              Disable all configs for <instance>"
	echo "  disable <instance> <config>     Disable <config> for <instance>"
	echo "  enable <instance>               Enable all configs for <instance>"
	echo "  enable <instance> <config>      Enable <config> for <instance>"
	echo "  list                            Show all the file-io configurations for each instance"
        exit
}

cmd_help ( )
{
	file_io_help
}

eprintf ( )
{
	printf "ERROR: %s\n" "$*" 1>&2
}

disable_config ( )
{
	local instance_dir=$1
	local conf_name=$2
	local file_io_config=$3
	local user=
	local found=
	local home_dir=

	if ! test -f $file_io_config
	then
		printf "config [$conf_name] not enabled\n"
		return
	fi

	source $file_io_config
	user=$FILE_IO_USERNAME

	rm -f $file_io_config
	printf "config [$conf_name] disabled\n"

	printf "checking if user [$user] is still required...\n"
	found=$( grep "^FILE_IO_USERNAME='$user'" $instance_dir/* 2>/dev/null )

	if test -z "$found"
	then
		home_dir=$( getent passwd $user | cut -f6 -d: )		
		printf "no other configs require user [$user], deleting user and home directory [$home_dir]\n"
		sudo "userdel" $user
		sudo rm -rf $home_dir
	fi

}

verify_config ( )
{
	local file="$1"

	if test -z "$FILE_IO_INCOMING_DIR"
	then
		eprintf "FILE_IO_INCOMING_DIR not set in config [$file]"
		exit 1
	fi

	if test -z "$FILE_IO_OUTGOING_DIR"
	then
		eprintf "FILE_IO_OUTGOING_DIR not set in config [$file]"
		exit 1
	fi

	if test -z "$FILE_IO_DIR_REVERSED"
	then
		eprintf "FILE_IO_DIR_REVERSED not set in config [$file]"
		exit 1
	fi

	if test -z "$FILE_IO_REGEX"
	then
		eprintf "FILE_IO_REGEX not set in config [$file]"
		exit 1
	fi

	if test -z "$FILE_IO_USERNAME"
	then
		eprintf "FILE_IO_USERNAME not set in config [$file]"
		exit 1
	fi

	if test -z "$FILE_IO_PASSWORD"
	then
		eprintf "FILE_IO_PASSWORD not set in config [$file]"
		exit 1
	fi

	if test -z "${FILE_IO_COMMAND+1}"
	then
		eprintf "FILE_IO_COMMAND not set in config [$file]"
		exit 1
	fi
}

check_user_exists ( )
{
	local user="$1"
	local pass="$2"
	local encrypt=$( perl -e 'print crypt( $ARGV[0], "password" )' $pass )
	local found=$( getent passwd $user 2>/dev/null )
	local home_dir=

	if test -z "$found"
	then
		printf "user [$user] not found, creating...\n"
		sudo "useradd" -m -s /usr/lib/sftp-server -p $encrypt -G fileio-filetransfer $user
		home_dir=$( getent passwd $user | cut -f6 -d: )		

		sudo mkdir -p $home_dir/file-io/
		sudo chown root:root $home_dir
		sudo chmod 755 $home_dir
		sudo chmod go-w $home_dir
		sudo chown -R $user:fileio-filetransfer $home_dir/file-io
	fi
}

check_user_incoming_dir_exists ( )
{
	local user="$1"
	local incoming_dir="$2"
	local home_dir=

	home_dir=$( getent passwd $user | cut -f6 -d: )

	if ! test -d $home_dir/file-io/$incoming_dir
	then
		printf "directory $home_dir/file-io/$incoming_dir not found, creating...\n"
		sudo mkdir -p $home_dir/file-io/$incoming_dir/tmp
		sudo chown -R $user:fileio-filetransfer $home_dir/file-io/$incoming_dir
		sudo chmod 777 $home_dir/file-io/$incoming_dir
	fi
}

enable_config ( )
{
	local conf_name=$1
	local instance_config=$2
	local file_io_config=$3

	if test -f $file_io_config
	then
		printf "config [$conf_name] already enabled\n"
		return
	fi

	source $instance_config

	verify_config "$instance_config"

	local user=$FILE_IO_USERNAME
	local pass=$FILE_IO_PASSWORD
	local incoming_dir=$FILE_IO_INCOMING_DIR

	check_user_exists "$user" "$pass"
	check_user_incoming_dir_exists "$user" "$incoming_dir"

	ln -s $instance_config $file_io_config
	printf "config [$conf_name] enabled\n"
}

cmd_disable ( )
{
	local instance_name=$2
	local config_name=$3
	local instance_dir=
	local current_instance=$PQ_CURRENT_INSTANCE

	local location=
	local entity=
	local part=
	local instance=

	dir=$PQ_CHASSIS_VAR_DIR/$( echo $current_instance | awk -F '/' '{ print "/installations/entities/" $1 "/location/" $2 "/parts/" $3 "/instances/" $4 }' )

	if test -z "$instance_name"
	then
		printf "No instance specified\n"
		exit 1
	fi

	entity=$( echo $instance_name | awk -F'/' '{ print $1 }' )
	location=$( echo $instance_name | awk -F'/' '{ print $2 }' )
	part=$( echo $instance_name | awk -F'/' '{ print $3 }' )
	instance=$( echo $instance_name | awk -F'/' '{ print $4 }' )
	
	if test -z "$location" || test -z "$entity" || test -z "$part" || test -z "$instance"
	then
		printf "Instance name was not in the correct format location/entity/part/instance\n"
		exit 1
	fi

	instance_dir=$PQ_CHASSIS_VAR_DIR/installations/entities/$entity/location/$location/parts/$part/instances/$instance/

	if test -z "$config_name"
	then
		local confs=$( find $instance_dir/file-io -type f -name "*.file-io" -printf "%f\n" 2>/dev/null )
		for i in $confs
		do
			disable_config "$dir/conf/" "$i" "$dir/conf/$entity-$location-$part-$instance-$i"
		done
		
	else
		disable_config "$dir/conf/" "$config_name" "$dir/conf/$entity-$location-$part-$instance-$config_name"
	fi
}

cmd_enable ( )
{
	local instance_name=$2
	local config_name=$3
	local instance_dir=
	local current_instance=$PQ_CURRENT_INSTANCE

	local location=
	local entity=
	local part=
	local instance=

	dir=$PQ_CHASSIS_VAR_DIR/$( echo $current_instance | awk -F '/' '{ print "/installations/entities/" $1 "/location/" $2 "/parts/" $3 "/instances/" $4 }' )

	if test -z "$instance_name"
	then
		printf "No instance specified\n"
		exit 1
	fi

	entity=$( echo $instance_name | awk -F'/' '{ print $1 }' )
	location=$( echo $instance_name | awk -F'/' '{ print $2 }' )
	part=$( echo $instance_name | awk -F'/' '{ print $3 }' )
	instance=$( echo $instance_name | awk -F'/' '{ print $4 }' )
	
	if test -z "$location" || test -z "$entity" || test -z "$part" || test -z "$instance"
	then
		printf "Instance name was not in the correct format location/entity/part/instance\n"
		exit 1
	fi

	instance_dir=$PQ_CHASSIS_VAR_DIR/installations/entities/$entity/location/$location/parts/$part/instances/$instance/

	if test -z "$config_name"
	then
		local confs=$( find $instance_dir/file-io -type f -name "*.file-io" -printf "%f\n" 2>/dev/null )
		for i in $confs
		do
			enable_config "$i" "$instance_dir/file-io/$i" "$dir/conf/$entity-$location-$part-$instance-$i"
		done
		
	else
		enable_config "$config_name" "$instance_dir/file-io/$config_name" "$dir/conf/$entity-$location-$part-$instance-$config_name"
	fi
}

cmd_list ( )
{
	local configs=$( find $PQ_CHASSIS_VAR_DIR/installations/ -type f -name "*.file-io" 2>/dev/null | grep "file-io\/[^/]*.file-io$" )
	local conf=
	local instance=
	local name=
	local file=
	local instance_dir=
	local dir=
	local enabled=

	instance_dir=$( echo $PQ_CURRENT_INSTANCE | awk -F '/' '{ print "/installations/entities/" $1 "/location/" $2 "/parts/" $3 "/instances/" $4 }' )
	dir=$PQ_CHASSIS_VAR_DIR/$instance_dir/

	printf "File-IO:\n\n"
	printf "  %-30s %-30s %-20s\n" "instance" "config" "status"
	for i in $configs
	do
		conf=$( echo $i | awk -F '/' '{ print $9 "/" $11 "/" $13 "/" $15 " " $17 }' )
		instance=$( echo $conf | awk '{ print $1 }' )
		name=$( echo $conf | awk '{ print $2 }' )		

		file=$dir/conf/${instance//\//-}-$name
		if test -f $file
		then
			enabled="enabled"
		else
			enabled=""
		fi

		printf "  %-30s %-30s %-20s\n" "$instance" "$name" "$enabled"
	done
}

command=

if test -z "$PQ_CURRENT_INSTANCE"
then
	printf "No instance currently selected\n"
	exit 1
fi

while test $# != 0 && test -z "$command"
do
	case "$1" in
		help | list | enable | disable )
			command=$1
			;;
		* )
			break
			;;
	esac
done

if test -z "$command"
then
	command=help
fi

"cmd_$command" "$@"
