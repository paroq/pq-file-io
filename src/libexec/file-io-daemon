#!/usr/bin/env bash

pid=$$

echo "file-io daemon ($pid) started"

declare -a INCOMING_DIR
declare -a OUTGOING_DIR
declare -a DIR_REVERSED
declare -a FILE_REGEX
declare -a USERNAME
declare -a PASSWORD
declare -a COMMAND

cleanup ( )
{
	echo "file-io daemon caught TERM signal"
	echo "cleaning up..."
	exit
}

trap 'cleanup' TERM

log ( )
{
	date=$( date "+%Y-%m-%d-%HT00" )
	file=../log/file-io-daemon-$date.log
	printf "$( date "+%H:%M:%S" ) $1\n" >> $file
}

load_configs ( )
{
	local i=0
	local configs=$( find ../conf/ -maxdepth 1 -type l -name "*.file-io" )
	for c in $configs
	do
		
		unset FILE_IO_INCOMING_DIR
		unset FILE_IO_OUTGOING_DIR
		unset FILE_IO_DIR_REVERSED
		unset FILE_IO_REGEX
		unset FILE_IO_USERNAME
		unset FILE_IO_PASSWORD
		unset FILE_IO_COMMAND

		source $c

		if test -z "$FILE_IO_INCOMING_DIR"
		then
			printf "ERROR: FILE_IO_INCOMING_DIR not specified in config $c\n"
			exit 1
		fi

		if test -z "$FILE_IO_OUTGOING_DIR"
		then
			printf "ERROR: FILE_IO_OUTGOING_DIR not specified in config $c\n"
			exit 1
		fi

		if test -z "$FILE_IO_DIR_REVERSED"
		then
			printf "ERROR: FILE_IO_DIR_REVERSED not specified in config $c\n"
			exit 1
		fi

		if test -z "$FILE_IO_REGEX"
		then
			printf "ERROR: FILE_IO_REGEX not specified in config $c\n"
			exit 1
		fi

		if test -z "$FILE_IO_USERNAME"
		then
			printf "ERROR: FILE_IO_USERNAME not specified in config $c\n"
			exit 1
		fi

		if test -z "$FILE_IO_PASSWORD"
		then
			printf "ERROR: FILE_IO_PASSWORD not specified in config $c\n"
			exit 1
		fi

		if test -z ${FILE_IO_COMMAND+1}
		then
			printf "ERROR: FILE_IO_COMMAND not specified in config $c\n"
			exit 1
		fi

		INCOMING_DIR[$i]=$FILE_IO_INCOMING_DIR
		OUTGOING_DIR[$i]=$FILE_IO_OUTGOING_DIR
		DIR_REVERSED[$i]=$FILE_IO_DIR_REVERSED
		FILE_REGEX[$i]=$FILE_IO_REGEX
		USERNAME[$i]=$FILE_IO_USERNAME
		PASSWORD[$i]=$FILE_IO_PASSWORD
		COMMAND[$i]=$FILE_IO_COMMAND

		i=$(( i + 1 ))
	done
}

find_and_move_files ( )
{
	local incoming_dir="$1"
	local outgoing_dir="$2"
	local pattern="$3"
	local command="$4"
	local files=
	local count=
	local output=

	FILE_IO_INCOMING_DIR=$incoming_dir
	FILE_IO_OUTGOING_DIR=$outgoing_dir

	log "Searching [$incoming_dir] for files that match the regex [$pattern]"

	files=
	files=$( find $incoming_dir/ -maxdepth 1 -type f -regex "$pattern" )
	if test -z "$files"
	then
		count=0
	else
		count=$( echo $files | wc -w )
	fi

	log "  Found [$count] files in [$incoming_dir]"
	
	for f in $files
	do
		FILE_IO_FILE=$f
		log "  Moving [$f] to [$outgoing_dir]"
		output=$( eval $command 2>&1 )
		log "  Command output: $output"
		mv $f $outgoing_dir/ 2>&1
	done
}

loop ( )
{
	local home_dir=
	local length=
	local end=
	local user=
	local incoming_dir=
	local outgoing_dir=
	local direction=
	local pattern=
	local command=
	local files=
	local count=

	while true 
	do
		length=${#USERNAME[@]}
		end=$(( ${#USERNAME[@]} - 1 ))

		for i in $(seq 0 $end)
		do
			user=${USERNAME[$i]}
			home_dir=$( getent passwd $user | cut -f6 -d: )
			incoming_dir=$home_dir/file-io/${INCOMING_DIR[$i]}/
			outgoing_dir=${OUTGOING_DIR[$i]}
			pattern=${FILE_REGEX[$i]}
			command=${COMMAND[$i]}
			direction=${DIR_REVERSED[$i]}

			if test $direction -eq 0
			then
				find_and_move_files "$incoming_dir" "$outgoing_dir" "$pattern" "$command"
			else
				find_and_move_files "$outgoing_dir" "$incoming_dir" "$pattern" "$command"
			fi
		done

		sleep 5
	done
}

load_configs
loop
